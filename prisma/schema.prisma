// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  uuid      String   @id
  
  email     String   @unique
  name      String?
  password  String

  trips     Trip[]
  ratings   Rating[]

  saved     SavedTrips[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SavedTrips {
  uuid      String   @id
  
  tripId    String
  trip      Trip     @relation(fields: [tripId], references: [uuid], onDelete: Cascade)

  userId    String
  user      User     @relation(fields: [userId], references: [uuid], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Trip {
  uuid      String   @id
  
  name      String
  startDate DateTime
  endDate   DateTime
  comment   String?

  location  TripLocation?

  userId    String
  user      User     @relation(fields: [userId], references: [uuid])

  ratings   Rating[]
  saved     SavedTrips[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TripLocation {
  uuid      String   @id
  
  name      String
  latitude  Float
  longitude Float

  tripId    String   @unique
  trip      Trip     @relation(fields: [tripId], references: [uuid], onDelete: Cascade)

  condition LocationCondition?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LocationCondition {
  uuid        String   @id

  locationId  String  @unique
  location    TripLocation @relation(fields: [locationId], references: [uuid], onDelete: Cascade)

  avgTempC    Float
  avgTempF    Float
  avgHumidity Float

  comment     String?
  icon        String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Rating {
  uuid      String   @id
  
  value     Int
  comment   String?

  tripId    String
  trip      Trip     @relation(fields: [tripId], references: [uuid], onDelete: Cascade)

  userId    String
  user      User     @relation(fields: [userId], references: [uuid], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}